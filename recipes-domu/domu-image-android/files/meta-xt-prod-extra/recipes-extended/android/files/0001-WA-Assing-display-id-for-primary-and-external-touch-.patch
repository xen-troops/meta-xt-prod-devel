From c9f178375630d56f19ba3defc2a56f9ebe6b8ce5 Mon Sep 17 00:00:00 2001
From: Andrii Chepurnyi <andrii_chepurnyi@epam.com>
Date: Wed, 2 Jan 2019 22:02:15 +0200
Subject: [PATCH] WA: Assing display id for primary and external touch devices

This patch adds an ability to map two touch devices on to
two displays using idc file. touch.primarydevice will be
mapped for display 0. touch.externaldevice will be mapped
for display 1.

Change-Id: I75308393a176158f856a2b59c7e6491138bcd0a0
Signed-off-by: Andrii Chepurnyi <andrii_chepurnyi@epam.com>
---
 services/inputflinger/EventHub.cpp    | 14 ++++++++++++++
 services/inputflinger/InputReader.cpp | 13 ++++++-------
 2 files changed, 20 insertions(+), 7 deletions(-)

diff --git a/services/inputflinger/EventHub.cpp b/services/inputflinger/EventHub.cpp
index 4d9a2a0..4750d55 100644
--- a/services/inputflinger/EventHub.cpp
+++ b/services/inputflinger/EventHub.cpp
@@ -1497,10 +1497,24 @@ void EventHub::loadConfigurationLocked(Device* device) {
     } else {
         status_t status = PropertyMap::load(device->configurationFile,
                 &device->configuration);
+
         if (status) {
             ALOGE("Error loading input device configuration file for device '%s'.  "
                     "Using default configuration.",
                     device->identifier.name.string());
+        } else {
+            String8 str;
+            if (device->configuration->tryGetProperty(String8("touch.primarydevice"), str)) {
+                if (str == device->path) {
+                    device->configuration->addProperty(String8("touch.displayId"), String8("0"));
+                } else if (device->configuration->tryGetProperty(String8("touch.externaldevice"),
+                        str)) {
+                    if (str == device->path) {
+                        device->configuration->addProperty(String8("touch.displayId"), String8("1"));
+                    }
+                }
+            }
+
         }
     }
 }
diff --git a/services/inputflinger/InputReader.cpp b/services/inputflinger/InputReader.cpp
index e0cd8a0..72be4e6 100644
--- a/services/inputflinger/InputReader.cpp
+++ b/services/inputflinger/InputReader.cpp
@@ -3393,8 +3393,12 @@ void TouchInputMapper::configureParameters() {
         mParameters.hasAssociatedDisplay = true;
         if (mParameters.deviceType == Parameters::DEVICE_TYPE_TOUCH_SCREEN) {
             mParameters.associatedDisplayIsExternal = getDevice()->isExternal();
-            getDevice()->getConfiguration().tryGetProperty(String8("touch.displayId"),
-                    mParameters.uniqueDisplayId);
+            if(getDevice()->getConfiguration().tryGetProperty(String8("touch.displayId"),
+                    mParameters.uniqueDisplayId)) {
+                if (mParameters.uniqueDisplayId != "0") {
+                    mParameters.associatedDisplayIsExternal = true;
+                }
+            }
         }
     }
 
@@ -3522,11 +3526,6 @@ void TouchInputMapper::configureSurface(nsecs_t when, bool* outResetNeeded) {
 
         if (mParameters.associatedDisplayIsExternal) {
             viewportTypeToUse = ViewportType::VIEWPORT_EXTERNAL;
-        } else if (!mParameters.uniqueDisplayId.isEmpty()) {
-            // If the IDC file specified a unique display Id, then it expects to be linked to a
-            // virtual display with the same unique ID.
-            uniqueDisplayId = &mParameters.uniqueDisplayId;
-            viewportTypeToUse = ViewportType::VIEWPORT_VIRTUAL;
         } else {
             viewportTypeToUse = ViewportType::VIEWPORT_INTERNAL;
         }
-- 
2.7.4

