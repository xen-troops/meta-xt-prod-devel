From 8701a270e95cce8c29b645121edd1914b1b65aff Mon Sep 17 00:00:00 2001
From: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
Date: Wed, 4 Apr 2018 20:15:50 +0300
Subject: [PATCH 1/2] libxl: Add DTB compatible list to config file

Some platforms need more compatible property values in device
tree root node in addition to "xen,xenvm-%d.%d" and "xen,xenvm"
values that are given by Xen by default.
Specify in domain configuration file which values should be added
by providing "dtb_compatible" list of strings separated by comas.

Signed-off-by: Iurii Konovalenko <iurii.konovalenko@globallogic.com>
Signed-off-by: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
---
 tools/libs/light/libxl_arm.c     | 42 ++++++++++++++++++++++++++++++++--------
 tools/libs/light/libxl_types.idl |  1 +
 tools/xl/xl_parse.c              |  7 +++++++
 3 files changed, 42 insertions(+), 8 deletions(-)

diff --git a/tools/libs/light/libxl_arm.c b/tools/libs/light/libxl_arm.c
index eb9376b..13a8cae 100644
--- a/tools/libs/light/libxl_arm.c
+++ b/tools/libs/light/libxl_arm.c
@@ -319,20 +319,46 @@ static int fdt_property_regs(libxl__gc *gc, void *fdt,
 
 static int make_root_properties(libxl__gc *gc,
                                 const libxl_version_info *vers,
-                                void *fdt)
+                                void *fdt,
+                                const libxl_domain_build_info *info)
 {
-    int res;
+    const char *compat0 = GCSPRINTF("xen,xenvm-%d.%d",
+                                    vers->xen_version_major,
+                                    vers->xen_version_minor);
+    const char *compat1 = "xen,xenvm";
+    const char **compats;
+    char *compat, *p;
+    size_t sz = 0;
+    int i, res, num_compats;
 
     res = fdt_property_string(fdt, "model", GCSPRINTF("XENVM-%d.%d",
                                                       vers->xen_version_major,
                                                       vers->xen_version_minor));
     if (res) return res;
 
-    res = fdt_property_compat(gc, fdt, 2,
-                              GCSPRINTF("xen,xenvm-%d.%d",
-                                        vers->xen_version_major,
-                                        vers->xen_version_minor),
-                              "xen,xenvm");
+    num_compats = 2 + libxl_string_list_length(&info->dt_compatible);
+    compats = libxl__zalloc(gc, num_compats * sizeof(*compats));
+    if (!compats)
+        return -FDT_ERR_INTERNAL;
+
+    compats[0] = compat0;
+    compats[1] = compat1;
+    sz = strlen(compat0) + strlen(compat1) + 2;
+    for (i = 0; info->dt_compatible && info->dt_compatible[i] != NULL; i++) {
+        compats[2 + i] = info->dt_compatible[i];
+        sz += strlen(info->dt_compatible[i]) + 1;
+    }
+
+    p = compat = libxl__zalloc(gc, sz);
+    if (!p)
+        return -FDT_ERR_INTERNAL;
+
+    for (i = 0; i < num_compats; i++) {
+        strcpy(p, compats[i]);
+        p += strlen(compats[i]) + 1;
+    }
+
+    res = fdt_property(fdt, "compatible", compat, sz);
     if (res) return res;
 
     res = fdt_property_cell(fdt, "interrupt-parent", GUEST_PHANDLE_GIC);
@@ -1012,7 +1038,7 @@ next_resize:
 
         FDT( fdt_begin_node(fdt, "") );
 
-        FDT( make_root_properties(gc, vers, fdt) );
+        FDT( make_root_properties(gc, vers, fdt, info) );
         FDT( make_chosen_node(gc, fdt, !!dom->modules[0].blob, state, info) );
         FDT( make_cpus_node(gc, fdt, info->max_vcpus, ainfo) );
         FDT( make_psci_node(gc, fdt) );
diff --git a/tools/libs/light/libxl_types.idl b/tools/libs/light/libxl_types.idl
index 7a2efd6..f99ca7f 100644
--- a/tools/libs/light/libxl_types.idl
+++ b/tools/libs/light/libxl_types.idl
@@ -550,6 +550,7 @@ libxl_domain_build_info = Struct("domain_build_info",[
     # Note that the partial device tree should avoid to use the phandle
     # 65000 which is reserved by the toolstack.
     ("device_tree",      string),
+    ("dt_compatible",    libxl_string_list),
     ("acpi",             libxl_defbool),
     ("bootloader",       string),
     ("bootloader_args",  libxl_string_list),
diff --git a/tools/xl/xl_parse.c b/tools/xl/xl_parse.c
index 680f9df..780b778 100644
--- a/tools/xl/xl_parse.c
+++ b/tools/xl/xl_parse.c
@@ -2779,6 +2779,13 @@ skip_vfb:
         }
     }
 
+    e = xlu_cfg_get_list_as_string_list(config, "dt_compatible",
+                                        &b_info->dt_compatible, 1);
+    if (e && e != ESRCH) {
+            fprintf(stderr,"xl: Unable to parse dt_compatible\n");
+            exit(-ERROR_FAIL);
+    }
+
     if (!xlu_cfg_get_list(config, "usbctrl", &usbctrls, 0, 0)) {
         d_config->num_usbctrls = 0;
         d_config->usbctrls = NULL;
-- 
2.7.4

